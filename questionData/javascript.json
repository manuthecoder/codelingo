[
  {
    "type": "chat",
    "prompt": "Which of these defines a variable that can be reassigned?",
    "answer": [
      "let varName = 2",
      "const varName = 2",
      "var varName = 2"
    ],
    "correctAnswer": 2,
    "level": 1
  },
  {
    "type": "chat",
    "prompt": "Which of the following is a string?",
    "answer": [
      "123",
      "\"hello\"",
      "true"
    ],
    "correctAnswer": 1,
    "level": 1
  },
  {
    "type": "chat",
    "prompt": "What is the difference between == and ===?",
    "answer": [
      "== checks for value equality, while === checks for value and type equality.",
      "== checks for value and type equality, while === checks for value equality.",
      "== and === are the same."
    ],
    "correctAnswer": 0,
    "level": 1
  },
  {
    "type": "chat",
    "prompt": "What does the typeof operator return?",
    "answer": [
      "The data type of a variable",
      "The value of a variable",
      "The name of a variable"
    ],
    "correctAnswer": 0,
    "level": 2
  },
  {
    "type": "chat",
    "prompt": "What does the push method do?",
    "answer": [
      "Adds an element to the beginning of an array",
      "Adds an element to the end of an array",
      "Removes the last element of an array"
    ],
    "correctAnswer": 1,
    "level": 2
  },
  {
    "type": "chat",
    "prompt": "What is the output of the following code? console.log(2 + '2')",
    "answer": [
      "'22'",
      "4",
      "NaN"
    ],
    "correctAnswer": 0,
    "level": 1
  },
  {
    "type": "chat",
    "prompt": "What is the difference between let and var?",
    "answer": [
      "let has block scope, while var has function scope.",
      "var has block scope, while let has function scope.",
      "let and var are the same."
    ],
    "correctAnswer": 0,
    "level": 1
  },
  {
    "type": "chat",
    "prompt": "What does the pop method do?",
    "answer": [
      "Removes an element from the beginning of an array",
      "Removes an element from the end of an array",
      "Adds an element to the end of an array"
    ],
    "correctAnswer": 1,
    "level": 2
  },
  {
    "type": "chat",
    "prompt": "What does the typeof operator return for null?",
    "answer": [
      "'object'",
      "'null'",
      "'undefined'"
    ],
    "correctAnswer": 0,
    "level": 3
  },
  {
    "type": "chat",
    "prompt": "What is the output of the following code? `console.log(Math.max(4, 8, 2, 6))`",
    "answer": [
      "4",
      "8",
      "2",
      "6"
    ],
    "correctAnswer": 1,
    "level": 1
  },
  {
    "type": "chat",
    "prompt": "What is the difference between `null` and `undefined`?",
    "answer": [
      "`null` is explicitly set by the programmer to indicate no value, while `undefined` means that a variable has not been assigned a value.",
      "`undefined` is explicitly set by the programmer to indicate no value, while `null` means that a variable has not been assigned a value.",
      "`null` and `undefined` are the same."
    ],
    "correctAnswer": 0,
    "level": 2
  },
  {
    "type": "chat",
    "prompt": "What is the purpose of the `break` statement in a loop?",
    "answer": [
      "To exit the loop immediately",
      "To skip the current iteration of the loop and move on to the next",
      "To jump to a specific point in the loop"
    ],
    "correctAnswer": 0,
    "level": 3
  },
  {
    "type": "chat",
    "prompt": "What is the difference between a `for` loop and a `while` loop?",
    "answer": [
      "A `for` loop is used when you know how many times you want to iterate, while a `while` loop is used when you want to iterate until a specific condition is met.",
      "A `while` loop is used when you know how many times you want to iterate, while a `for` loop is used when you want to iterate until a specific condition is met.",
      "`for` and `while` loops are the same."
    ],
    "correctAnswer": 0,
    "level": 3
  },
  {
    "type": "chat",
    "prompt": "Which of the following is not a way to access an object's property?",
    "answer": [
      "object.propertyName",
      "object['propertyName']",
      "object.getPropertyName()",
      "object.propertyName()"
    ],
    "correctAnswer": 0,
    "level": 3
  },
  {
    "type": "chat",
    "prompt": "What is the syntax for adding a new property to an object?",
    "answer": [
      "object.propertyName = value",
      "object['propertyName'] = value",
      "object.setProperty('propertyName', value)",
      "object.newProperty = value"
    ],
    "correctAnswer": 3,
    "level": 3
  },
  {
    "type": "chat",
    "prompt": "What is the difference between an object's `hasOwnProperty` method and the `in` operator?",
    "answer": [
      "`hasOwnProperty` checks if the property exists in the object's prototype chain, while `in` operator checks if the property exists in the object itself",
      "`in` operator checks if the property exists in the object's prototype chain, while `hasOwnProperty` checks if the property exists in the object itself",
      "`hasOwnProperty` and `in` operator are the same",
      "neither `hasOwnProperty` nor `in` operator can be used to check if a property exists in an object"
    ],
    "correctAnswer": 1,
    "level": 3
  },
  {
    "type": "chat",
    "prompt": "Which of the following is a comparison operator?",
    "answer": [
      "==",
      "=",
      "+",
      "-"
    ],
    "correctAnswer": 0,
    "level": 1
  },
  {
    "type": "chat",
    "prompt": "Which of the following is NOT a primitive data type in JavaScript?",
    "answer": [
      "number",
      "boolean",
      "string",
      "array"
    ],
    "correctAnswer": 3,
    "level": 1
  },
  {
    "type": "chat",
    "prompt": "What is the correct syntax to create an array named 'myArray' with 3 elements, '1', '2', and '3'?",
    "answer": [
      "var myArray = [1,2,3]",
      "var myArray = (1,2,3)",
      "var myArray = {1,2,3}",
      "var myArray = \"1",
      "2",
      "3\""
    ],
    "correctAnswer": 0,
    "level": 2
  },
  {
    "type": "chat",
    "prompt": "Which of the following is a loop statement?",
    "answer": [
      "if",
      "for",
      "while",
      "switch"
    ],
    "correctAnswer": 1,
    "level": 2
  },
  {
    "type": "chat",
    "prompt": "What is the purpose of the 'console.log()' method in JavaScript?",
    "answer": [
      "to output a value to the console",
      "to declare a variable",
      "to create a loop",
      "to define a function"
    ],
    "correctAnswer": 0,
    "level": 1
  },
  {
    "type": "chat",
    "prompt": "Which of the following is a method used to remove the last element of an array?",
    "answer": [
      ".removeLast()",
      ".pop()",
      ".shift()",
      ".slice()"
    ],
    "correctAnswer": 1,
    "level": 2
  },
  {
    "type": "chat",
    "prompt": "Which of the following is a JavaScript operator used to assign a value to a variable?",
    "answer": [
      "=",
      "==",
      "===",
      "=>"
    ],
    "correctAnswer": 0,
    "level": 1
  },
  {
    "type": "chat",
    "prompt": "What is the purpose of the 'Math.random()' method in JavaScript?",
    "answer": [
      "to generate a random number between 0 and 1",
      "to generate a random integer between 0 and 100",
      "to generate a random number between 0 and a specified number",
      "to generate a random integer between two specified numbers"
    ],
    "correctAnswer": 0,
    "level": 2
  },
  {
    "type": "chat",
    "prompt": "What is an infinite loop?",
    "answer": [
      "An infinite loop is a loop that runs forever",
      "An infinite loop is a loop that only runs once",
      "An infinite loop is a loop that stops when a condition is met"
    ],
    "correctAnswer": 0,
    "level": 3
  },
  {
    "type": "chat",
    "prompt": "What is a nested loop?",
    "answer": [
      "A nested loop is a loop inside another loop",
      "A nested loop is a loop that only runs once",
      "A nested loop is a loop that runs backwards"
    ],
    "correctAnswer": 0,
    "level": 3
  },
  {
    "type": "chat",
    "prompt": "What is the difference between `static` and `final`?",
    "answer": [
      "`static` means the member belongs to the class and not to any instance of the class, while `final` means the member cannot be modified after it is initialized",
      "`static` means the member cannot be modified after it is initialized, while `final` means the member belongs to the class and not to any instance of the class",
      "`static` and `final` are the same thing"
    ],
    "correctAnswer": 0,
    "level": 4
  },
  {
    "type": "chat",
    "prompt": "What is the difference between `this` and `super`?",
    "answer": [
      "`this` refers to the current object instance, while `super` refers to the superclass of the current object instance",
      "`this` refers to the superclass of the current object instance, while `super` refers to the current object instance",
      "`this` and `super` are the same thing"
    ],
    "correctAnswer": 0,
    "level": 5
  },
  {
    "type": "chat",
    "prompt": "What is polymorphism in Java?",
    "answer": [
      "Polymorphism is the ability of an object to take on many forms. In Java, this can be achieved through method overloading and method overriding",
      "Polymorphism is the ability of an object to inherit multiple classes. In Java, this can be achieved through multiple inheritance",
      "Polymorphism is the ability of an object to access other objects in the same package. In Java, this can be achieved through package-level access modifiers"
    ],
    "correctAnswer": 0,
    "level": 5
  },
  {
    "type": "chat",
    "prompt": "What is the difference between an abstract class and an interface in Java?",
    "answer": [
      "An abstract class can have instance variables, non-abstract methods, and constructors, while an interface can only have public static final variables and abstract methods. A class can extend only one abstract class, but can implement multiple interfaces",
      "An abstract class can have public static final variables and abstract methods, while an interface can have instance variables, non-abstract methods, and constructors. A class can implement only one abstract class, but can extend multiple interfaces",
      "An abstract class and an interface are the same thing"
    ],
    "correctAnswer": 0,
    "level": 4
  },
  {
    "type": "chat",
    "prompt": "What is the `equals()` method in Java used for?",
    "answer": [
      "The `equals()` method is used to check if two objects are equal. It is used to compare the contents of objects, not their memory locations",
      "The `equals()` method is used to compare the memory locations of two objects. It is used to check if two objects are the same instance of a class",
      "The `equals()` method is not used in Java"
    ],
    "correctAnswer": 0,
    "level": 4
  },
  {
    "type": "chat",
    "prompt": "What is a constructor in Java?",
    "answer": [
      "A constructor is a special method that is used to create and initialize objects. It has the same name as the class and no return type. When an object is created, the constructor is called automatically and initializes the object with default or provided values.",
      "A constructor is a method that is used to modify objects. It can be called multiple times to update the object with new values.",
      "A constructor is not a concept in Java."
    ],
    "correctAnswer": 0,
    "level": 4
  },
  {
    "type": "chat",
    "prompt": "Which access modifier makes a class member accessible only within its own package?",
    "answer": [
      "default",
      "public",
      "private"
    ],
    "correctAnswer": 0,
    "level": 4
  },
  {
    "type": "chat",
    "prompt": "Which of the following is true about constructors?",
    "answer": [
      "Constructors have the same name as the class they are in",
      "Constructors can have a return type",
      "Constructors can be inherited from a superclass"
    ],
    "correctAnswer": 0,
    "level": 4
  },
  {
    "type": "chat",
    "prompt": "Which of these is used to add a comment in JavaScript?",
    "answer": [
      "//",
      "<!-- -->",
      "/* */"
    ],
    "correctAnswer": 0,
    "level": 2
  },
  {
    "type": "chat",
    "prompt": "Which of these is used to create an object in JavaScript?",
    "answer": [
      "{}",
      "[]",
      "()"
    ],
    "correctAnswer": 0,
    "level": 2
  },
  {
    "type": "chat",
    "prompt": "Which of these is not a looping structure in JavaScript?",
    "answer": [
      "for",
      "while",
      "repeat"
    ],
    "correctAnswer": 2,
    "level": 3
  },
  {
    "type": "chat",
    "prompt": "Which of these is the correct syntax to declare an array?",
    "answer": [
      "var arr = [];",
      "arr[] = {};",
      "array arr = [];"
    ],
    "correctAnswer": 0,
    "level": 3
  },
  {
    "type": "chat",
    "prompt": "What is the difference between a function declaration and a function expression in JavaScript?",
    "answer": [
      "A function declaration is hoisted to the top of the scope, while a function expression is not.",
      "A function expression is hoisted to the top of the scope, while a function declaration is not.",
      "There is no difference between a function declaration and a function expression."
    ],
    "correctAnswer": 0,
    "level": 4
  },
  {
    "type": "chat",
    "prompt": "What is the purpose of the 'use strict' directive in JavaScript?",
    "answer": [ "To enable strict mode, which enforces stricter rules for JavaScript code.", "To disable strict mode, which allows for more lenient rules for JavaScript code.", "To enable backward compatibility with older JavaScript versions." ],
    "correctAnswer": 0,
    "level": 4
  },
  {
    "type": "chat",
    "prompt": "What is the difference between 'map' and 'forEach' in JavaScript?",
    "answer": [ "'map' returns a new array with the same number of elements as the original array, while 'forEach' does not return anything.", "'forEach' returns a new array with the same number of elements as the original array, while 'map' does not return anything.", "There is no difference between 'map' and 'forEach'." ],
    "correctAnswer": 0,
    "level": 4
  },
  {
    "type": "chat",
    "prompt": "What is a closure in JavaScript?",
    "answer": [ "A function that is defined inside another function", "A variable that is accessible outside of its current scope", "A combination of a function and the lexical environment within which that function was declared" ],
    "correctAnswer": 2,
    "level": 5
  },
  {
    "type": "chat",
    "prompt": "Which method returns a new array with all elements that pass the test implemented by the provided function?",
    "answer": [ "map()", "forEach()", "filter()" ],
    "correctAnswer": 2,
    "level": 5
  },
  {
    "type": "chat",
    "prompt": "What is the output of this code?   var arr = [1,2,3];   console.log(arr.splice(1,1));",
    "answer": [ "[2]", "[1,2]", "[1,3]" ],
    "correctAnswer": 0,
    "level": 5
  },
  {
    "type": "chat",
    "prompt": "What is the difference between 'setTimeout' and 'setInterval' in JavaScript?",
    "answer": [ "They are interchangeable", "'setTimeout' executes the function once after a delay, while 'setInterval' executes the function repeatedly with a fixed time delay between each execution", "'setInterval' executes the function once after a delay, while 'setTimeout' executes the function repeatedly with a fixed time delay between each execution" ],
    "correctAnswer": 1,
    "level": 5
  },
  {
    "type": "chat",
    "prompt": "What is the difference between 'Object.create' and 'new Object' in JavaScript?",
    "answer": [ "They are interchangeable", "'Object.create' creates a new object with the specified prototype object, while 'new Object' creates a new object with the default Object prototype", "'new Object' creates a new object with the specified prototype object, while 'Object.create' creates a new object with the default Object prototype" ],
    "correctAnswer": 0,
    "level": 5
  },
  {
    "type": "chat",
    "prompt": "What is the difference between 'call' and 'apply' methods in JavaScript?",
    "answer": [ "'call' method accepts arguments as a comma-separated list, while 'apply' method accepts arguments as an array", "'apply' method accepts arguments as a comma-separated list, while 'call' method accepts arguments as an array", "Both methods accept arguments as a comma-separated list" ],
    "correctAnswer": 0,
    "level": 5
  },
  {
    "type": "chat",
    "prompt": "What is the 'this' keyword in JavaScript?",
    "answer": [ "The 'this' keyword refers to the object that it belongs to, and it changes depending on how the function is called", "The 'this' keyword refers to the global object, and it cannot be changed", "The 'this' keyword refers to the function that it belongs to, and it cannot be changed" ],
    "correctAnswer": 0,
    "level": 5
  },
  {
    "type": "chat",
    "prompt": "What is the difference between 'slice' and 'splice' in JavaScript?",
    "answer": [ "'slice' creates a new array with the elements from the original array, while 'splice' removes or replaces elements in the original array", "'splice' creates a new array with the elements from the original array, while 'slice' removes or replaces elements in the original array", "Both 'slice' and 'splice' remove or replace elements in the original array" ],
    "correctAnswer": 0,
    "level": 5
  },
  {
    "type": "chat",
    "prompt": "What is the event loop in JavaScript?",
    "answer": [ "The event loop is a mechanism that handles asynchronous callbacks and ensures that they are executed in the correct order", "The event loop is a way to create new threads in JavaScript and run them concurrently", "The event loop is a data structure used to store information about events and callbacks" ],
    "correctAnswer": 0,
    "level": 5
  },
  {
    "type": "chat",
    "prompt": "What is a promise in JavaScript?",
    "answer": [ "A promise is an object representing the eventual completion or failure of an asynchronous operation", "A promise is a function that takes a callback as an argument and returns a new function", "A promise is a data structure used to store information about asynchronous operations" ],
    "correctAnswer": 0,
    "level": 5
  },
  {
    "type": "chat",
    "prompt": "What is a generator function in JavaScript?",
    "answer": [ "A generator function is a special type of function that can be paused and resumed, allowing it to generate a sequence of values over time", "A generator function is a function that takes a callback as an argument and returns a new function", "A generator function is a function that is automatically called when an event occurs" ],
    "correctAnswer": 0,
    "level": 4
  },
  {
    "type": "chat",
    "prompt": "What is the spread operator in JavaScript?",
    "answer": [ "The spread operator (...) allows an iterable such as an array or string to be expanded in places where zero or more arguments or elements are expected", "The spread operator (...) allows a function to take an arbitrary number of arguments as an array", "The spread operator (...) allows a variable to be declared without a specific type" ],
    "correctAnswer": 0,
    "level": 3
  },
  {
    "type": "chat",
    "prompt": "What is the difference between Object.seal() and Object.freeze() methods in JavaScript?",
    "answer": [ "Object.seal() prevents adding or deleting properties from an object, while Object.freeze() also prevents changing the value of existing properties", "Object.freeze() prevents adding or deleting properties from an object, while Object.seal() also prevents changing the value of existing properties", "There is no difference between Object.seal() and Object.freeze() methods" ],
    "correctAnswer": 0,
    "level": 5
  },
  {
    "type": "chat",
    "prompt": "What is hoisting in JavaScript?",
    "answer": [ "Hoisting is a behavior where variable and function declarations are moved to the top of their respective scopes before code execution", "Hoisting is a behavior where variables and function declarations are scoped to the function in which they are defined", "Hoisting is a behavior where variables and function declarations are scoped to the global object" ],
    "correctAnswer": 0,
    "level": 3
  }
]
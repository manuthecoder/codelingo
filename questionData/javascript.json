[
  {
    "type": "chat",
    "prompt": "Which of these defines a variable that can be reassigned?",
    "answer": ["let varName = 2", "const varName = 2", "var varName = 2"],
    "correctAnswer": 2,
    "level": 1
  },
  {
    "type": "build",
    "prompt": "How do you define a constant variable, `foo`?",
    "choices": ["var", "const", "foo", "=", "\"example value\""],
    "correctOrder": [1, 2, 3, 4],
    "level": 1
  },
  {
    "type": "chat",
    "prompt": "Which of the following is a string?",
    "answer": ["123", "\"hello\"", "true"],
    "correctAnswer": 1,
    "level": 1
  },
  {
    "type": "build",
    "prompt": "Create a variable called name and assign it the value John.",
    "choices": ["let", "const", "name", "=", "\"John\""],
    "correctOrder": [0, 2, 3, 1],
    "level": 1
  },
  {
    "type": "build",
    "prompt": "Create a constant variable called age and assign it the value 30.",
    "choices": ["var", "const", "age", "=", "30"],
    "correctOrder": [1, 2, 3, 4],
    "level": 1
  },
  {
    "type": "chat",
    "prompt": "What is the difference between == and ===?",
    "answer": [
      "== checks for value equality, while === checks for value and type equality.",
      "== checks for value and type equality, while === checks for value equality.",
      "== and === are the same."
    ],
    "correctAnswer": 0,
    "level": 1
  },
  {
    "type": "chat",
    "prompt": "What does the typeof operator return?",
    "answer": [
      "The data type of a variable",
      "The value of a variable",
      "The name of a variable"
    ],
    "correctAnswer": 0,
    "level": 2
  },
  {
    "type": "build",
    "prompt": "Create an array called fruits with the values apple, banana, and orange.",
    "choices": [
      "const",
      "fruits",
      "=",
      "[",
      "\"apple\"",
      ",",
      "\"banana\"",
      ",",
      "\"orange\"",
      "]",
      ";"
    ],
    "correctOrder": [0, 1, 2, 3, 4, 5, 6, 7, 8],
    "level": 2
  },
  {
    "type": "chat",
    "prompt": "What does the push method do?",
    "answer": [
      "Adds an element to the beginning of an array",
      "Adds an element to the end of an array",
      "Removes the last element of an array"
    ],
    "correctAnswer": 1,
    "level": 2
  },
  {
    "type": "chat",
    "prompt": "What is the output of the following code? console.log(2 + '2')",
    "answer": ["'22'", "4", "NaN"],
    "correctAnswer": 0,
    "level": 1
  },
  {
    "type": "build",
    "prompt": "Create an object called person with properties name and age.",
    "choices": [
      "const",
      "person",
      "=",
      "{",
      "name",
      ":",
      "\"John\"",
      ",",
      "age",
      ":",
      "30",
      "}",
      ";"
    ],
    "correctOrder": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11],
    "level": 3
  },
  {
    "type": "chat",
    "prompt": "What is the difference between let and var?",
    "answer": [
      "let has block scope, while var has function scope.",
      "var has block scope, while let has function scope.",
      "let and var are the same."
    ],
    "correctAnswer": 0,
    "level": 1
  },
  {
    "type": "chat",
    "prompt": "What does the pop method do?",
    "answer": [
      "Removes an element from the beginning of an array",
      "Removes an element from the end of an array",
      "Adds an element to the end of an array"
    ],
    "correctAnswer": 1,
    "level": 2
  },
  {
    "type": "chat",
    "prompt": "What does the typeof operator return for null?",
    "answer": ["'object'", "'null'", "'undefined'"],
    "correctAnswer": 0,
    "level": 3
  },
  {
    "type": "chat",
    "prompt": "What is the output of the following code? `console.log(Math.max(4, 8, 2, 6))`",
    "answer": ["4", "8", "2", "6"],
    "correctAnswer": 1,
    "level": 1
  },
  {
    "type": "chat",
    "prompt": "What is the difference between `null` and `undefined`?",
    "answer": [
      "`null` is explicitly set by the programmer to indicate no value, while `undefined` means that a variable has not been assigned a value.",
      "`undefined` is explicitly set by the programmer to indicate no value, while `null` means that a variable has not been assigned a value.",
      "`null` and `undefined` are the same."
    ],
    "correctAnswer": 0,
    "level": 2
  },
  {
    "type": "chat",
    "prompt": "What is the purpose of the `break` statement in a loop?",
    "answer": [
      "To exit the loop immediately",
      "To skip the current iteration of the loop and move on to the next",
      "To jump to a specific point in the loop"
    ],
    "correctAnswer": 0,
    "level": 3
  },
  {
    "type": "chat",
    "prompt": "What is the difference between a `for` loop and a `while` loop?",
    "answer": [
      "A `for` loop is used when you know how many times you want to iterate, while a `while` loop is used when you want to iterate until a specific condition is met.",
      "A `while` loop is used when you know how many times you want to iterate, while a `for` loop is used when you want to iterate until a specific condition is met.",
      "`for` and `while` loops are the same."
    ],
    "correctAnswer": 0,
    "level": 3
  },
  {
    "type": "chat",
    "prompt": "Which of the following is not a way to access an object's property?",
    "answer": [
      "object.propertyName",
      "object['propertyName']",
      "object.getPropertyName()",
      "object.propertyName()"
    ],
    "correctAnswer": 0,
    "level": 3
  },
  {
    "type": "chat",
    "prompt": "What is the syntax for adding a new property to an object?",
    "answer": [
      "object.propertyName = value",
      "object['propertyName'] = value",
      "object.setProperty('propertyName', value)",
      "object.newProperty = value"
    ],
    "correctAnswer": 3,
    "level": 3
  },
  {
    "type": "chat",
    "prompt": "What is the difference between an object's `hasOwnProperty` method and the `in` operator?",
    "answer": [
      "`hasOwnProperty` checks if the property exists in the object's prototype chain, while `in` operator checks if the property exists in the object itself",
      "`in` operator checks if the property exists in the object's prototype chain, while `hasOwnProperty` checks if the property exists in the object itself",
      "`hasOwnProperty` and `in` operator are the same",
      "neither `hasOwnProperty` nor `in` operator can be used to check if a property exists in an object"
    ],
    "correctAnswer": 1,
    "level": 3
  },
  {
    "type": "chat",
    "prompt": "Which of the following is a comparison operator?",
    "answer": ["==", "=", "+", "-"],
    "correctAnswer": 0,
    "level": 1
  },
  {
    "type": "build",
    "prompt": "How do you declare a function named 'add' that takes two parameters, 'a' and 'b'?",
    "choices": ["function", "add", "(", "a", ",", "b", ")", "{", "}", "return"],
    "correctOrder": [0, 1, 2, 3, 4, 5, 7, 8, 9],
    "level": 2
  },
  {
    "type": "chat",
    "prompt": "Which of the following is NOT a primitive data type in JavaScript?",
    "answer": ["number", "boolean", "string", "array"],
    "correctAnswer": 3,
    "level": 1
  },
  {
    "type": "chat",
    "prompt": "What is the correct syntax to create an array named 'myArray' with 3 elements, '1', '2', and '3'?",
    "answer": [
      "var myArray = [1,2,3]",
      "var myArray = (1,2,3)",
      "var myArray = {1,2,3}",
      "var myArray = \"1",
      "2",
      "3\""
    ],
    "correctAnswer": 0,
    "level": 2
  },
  {
    "type": "build",
    "prompt": "How do you write a conditional statement that checks if a variable 'x' is greater than 10 and less than or equal to 20?",
    "choices": [
      "if",
      "(",
      "x",
      ">",
      "10",
      "&&",
      "x",
      "<=",
      "20",
      ")",
      "{",
      "}"
    ],
    "correctOrder": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11],
    "level": 2
  },
  {
    "type": "chat",
    "prompt": "Which of the following is a loop statement?",
    "answer": ["if", "for", "while", "switch"],
    "correctAnswer": 1,
    "level": 2
  },
  {
    "type": "build",
    "prompt": "How do you create a new string by concatenating 'hello' and 'world'?",
    "choices": ["var", "newString", "=", "\"hello\"", "+", "\"world\"", ";"],
    "correctOrder": [0, 1, 2, 3, 4, 5, 6],
    "level": 3
  },
  {
    "type": "chat",
    "prompt": "What is the purpose of the 'console.log()' method in JavaScript?",
    "answer": [
      "to output a value to the console",
      "to declare a variable",
      "to create a loop",
      "to define a function"
    ],
    "correctAnswer": 0,
    "level": 1
  },
  {
    "type": "chat",
    "prompt": "Which of the following is a method used to remove the last element of an array?",
    "answer": [".removeLast()", ".pop()", ".shift()", ".slice()"],
    "correctAnswer": 1,
    "level": 2
  },
  {
    "type": "chat",
    "prompt": "Which of the following is a JavaScript operator used to assign a value to a variable?",
    "answer": ["=", "==", "===", "=>"],
    "correctAnswer": 0,
    "level": 1
  },
  {
    "type": "chat",
    "prompt": "What is the purpose of the 'Math.random()' method in JavaScript?",
    "answer": [
      "to generate a random number between 0 and 1",
      "to generate a random integer between 0 and 100",
      "to generate a random number between 0 and a specified number",
      "to generate a random integer between two specified numbers"
    ],
    "correctAnswer": 0,
    "level": 2
  },
  {
    "type": "chat",
    "prompt": "What is an infinite loop?",
    "answer": [
      "An infinite loop is a loop that runs forever",
      "An infinite loop is a loop that only runs once",
      "An infinite loop is a loop that stops when a condition is met"
    ],
    "correctAnswer": 0,
    "level": 3
  },
  {
    "type": "chat",
    "prompt": "What is a nested loop?",
    "answer": [ "A nested loop is a loop inside another loop", "A nested loop is a loop that only runs once", "A nested loop is a loop that runs backwards" ],
    "correctAnswer": 0,
    "level": 3
  },
  {
    "type": "build",
    "prompt": "How do you write a nested loop that prints a multiplication table for the numbers 1 to 5?",
    "choices": [ "for", "(", "int i = 1", ";", "i", "<=", "5", ";", "i", "++", ")", "{", "for", "(", "int j = 1", ";", "j", "<=", "5", ";", "j", "++", ")", "{", "System.out.print(i * j)", "\t", "}", "System.out.println()", "}" ],
    "correctOrder": [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24 ],
    "level": 5
  },
  {
		"type": "chat",
		"prompt": "What is the difference between `public`, `private`, and `protected` access modifiers?",
		"answer": [ "`public` members can be accessed by any class, `private` members can only be accessed within the same class, and `protected` members can be accessed within the same package or by a subclass in a different package", "`public` members can only be accessed within the same package, `private` members can be accessed by any class, and `protected` members can be accessed by a subclass in the same package or in a different package", "`public` members can only be accessed within the same package, `private` members can only be accessed within the same class, and `protected` members can be accessed within the same package or by a subclass in the same package or in a different package" ],
		"correctAnswer": 0,
    "level": 4
	},
  {
		"type": "build",
		"prompt": "Define a class `Person` with a `name` instance variable and `setName()` and `getName()` methods.",
		"choices": [ "class", "Person", "{", "private", "String", "name", ";", "public", "void", "setName", "(", "String", "name", ")", "{", "this.name", "=", "name", ";", "}", "public", "String", "getName", "(", ")", "{", "return", "name", ";", "}", "}" ],
		"correctOrder": [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26 ],
    "level": 5
	},
  {
		"type": "chat",
		"prompt": "What is the difference between `static` and `final`?",
		"answer": [ "`static` means the member belongs to the class and not to any instance of the class, while `final` means the member cannot be modified after it is initialized", "`static` means the member cannot be modified after it is initialized, while `final` means the member belongs to the class and not to any instance of the class", "`static` and `final` are the same thing" ],
		"correctAnswer": 0,
    "level": 4
	},
  {
		"type": "build",
		"prompt": "Define a static `counter` variable for the `Person` class that keeps track of the number of `Person` instances created.",
		"choices": [ "private", "static", "int", "counter", "=", "0", ";" ],
		"correctOrder": [ 0, 1, 2, 3, 4, 5, 6 ],
    "level": 4
	},
  {
		"type": "chat",
		"prompt": "What is the difference between `this` and `super`?",
		"answer": [ "`this` refers to the current object instance, while `super` refers to the superclass of the current object instance", "`this` refers to the superclass of the current object instance, while `super` refers to the current object instance", "`this` and `super` are the same thing" ],
		"correctAnswer": 0,
    "level": 5
	},
  {
		"type": "chat",
		"prompt": "What is polymorphism in Java?",
		"answer": [ "Polymorphism is the ability of an object to take on many forms. In Java, this can be achieved through method overloading and method overriding", "Polymorphism is the ability of an object to inherit multiple classes. In Java, this can be achieved through multiple inheritance", "Polymorphism is the ability of an object to access other objects in the same package. In Java, this can be achieved through package-level access modifiers" ],
		"correctAnswer": 0,
    "level": 5
	},
  {
		"type": "build",
		"prompt": "Define a subclass `Student` of the `Person` class with an additional `major` instance variable and `getMajor()` method.",
		"choices": [ "class", "Student", "extends", "Person", "{", "private", "String", "major", ";", "public", "String", "getMajor", "(", ")", "{", "return", "major", ";", "}", "}" ],
		"correctOrder": [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17 ],
    "level": 5
  },
  {
		"type": "chat",
		"prompt": "What is the difference between an abstract class and an interface in Java?",
		"answer": [ "An abstract class can have instance variables, non-abstract methods, and constructors, while an interface can only have public static final variables and abstract methods. A class can extend only one abstract class, but can implement multiple interfaces", "An abstract class can have public static final variables and abstract methods, while an interface can have instance variables, non-abstract methods, and constructors. A class can implement only one abstract class, but can extend multiple interfaces", "An abstract class and an interface are the same thing" ],
		"correctAnswer": 0,
    "level": 4
	},
  {
		"type": "build",
		"prompt": "Define an abstract class `Shape` with an abstract `area()` method.",
		"choices": [ "public", "abstract", "class", "Shape", "{", "public", "abstract", "double", "area", "(", ")", ";", "}" ],
		"correctOrder": [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12 ],
    "level": 4
	},
  {
		"type": "chat",
		"prompt": "What is the `equals()` method in Java used for?",
		"answer": [ "The `equals()` method is used to check if two objects are equal. It is used to compare the contents of objects, not their memory locations", "The `equals()` method is used to compare the memory locations of two objects. It is used to check if two objects are the same instance of a class", "The `equals()` method is not used in Java" ],
		"correctAnswer": 0,
    "level": 4
	},
  {
		"type": "build",
		"prompt": "Define a static method `sum()` in the `Calculator` class that takes two integers as parameters and returns their sum.",
		"choices": [ "public", "static", "int", "sum", "(", "int", "a", ",", "int", "b", ")", "{", "return", "a", "+", "b", ";", "}" ],
		"correctOrder": [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15 ],
    "level": 5
	},
  {
		"type": "build",
		"prompt": "Define a `final` class `MathConstants` with `PI` and `E` as `public static final` variables.",
		"choices": [ "public", "final", "class", "MathConstants", "{", "public", "static", "final", "double", "PI", "=", "3.14159265358979323846", ";", "public", "static", "final", "double", "E", "=", "2.71828182845904523536", ";", "}" ],
		"correctOrder": [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19 ],
    "level": 5
	},
  {
		"type": "build",
		"prompt": "Define a class `Rectangle` with `length` and `width` as instance variables and a method `getArea()` that returns the area of the rectangle.",
		"choices": [ "public", "class", "Rectangle", "{", "private", "double", "length", ";", "private", "double", "width", ";", "public", "Rectangle", "(", "double", "length", ",", "double", "width", ")", "{", "this", ".", "length", "=", "length", ";", "this", ".", "width", "=", "width", ";", "}", "public", "double", "getArea", "(", ")", "{", "return", "length", "*", "width", ";", "}", "}" ],
		"correctOrder": [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33 ],
    "level": 5
  },
  {
		"type": "build",
		"prompt": "Define a class `Person` with a `name` instance variable and a constructor that takes a `name` parameter and sets the `name` instance variable.",
		"choices": [ "public", "class", "Person", "{", "private", "String", "name", ";", "public", "Person", "(", "String", "name", ")", "{", "this", ".", "name", "=", "name", ";", "}", "}" ],
		"correctOrder": [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17 ],
    "level": 5
	},
  {
		"type": "chat",
		"prompt": "What is a constructor in Java?",
		"answer": [ "A constructor is a special method that is used to create and initialize objects. It has the same name as the class and no return type. When an object is created, the constructor is called automatically and initializes the object with default or provided values.", "A constructor is a method that is used to modify objects. It can be called multiple times to update the object with new values.", "A constructor is not a concept in Java." ],
		"correctAnswer": 0,
    "level": 4
	},
  {
		"type": "build",
		"prompt": "Define a class `Employee` that extends the `Person` class and adds an `id` instance variable and a `getId()` method that returns the `id`.",
		"choices": [ "public", "class", "Employee", "extends", "Person", "{", "private", "int", "id", ";", "public", "Employee", "(", "String", "name", ",", "int", "id", ")", "{", "super", "(", "name", ")", ";", "this", ".", "id", "=", "id", ";", "}", "public", "int", "getId", "(", ")", "{", "return", "id", ";", "}", "}" ],
		"correctOrder": [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31 ],
    "level": 5
	},
  {
		"type": "build",
		"prompt": "Define an interface `Resizable` with a method `resize(double factor)` that takes a scaling factor as a parameter and returns void.",
		"choices": [ "public", "interface", "Resizable", "{", "void", "resize", "(", "double", "factor", ")", ";", "}" ],
		"correctOrder": [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 ],
    "level": 5
	},
  {
    "type": "build",
    "prompt": "How do you define a method called add that takes two int parameters and returns their sum?",
    "choices": [ "public", "int", "add", "(", "int a", ",", "int b", ")", "{", "return a+b;", "}" ],
    "correctOrder": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
    "level": 4
  },
  {
    "type": "chat",
    "prompt": "Which access modifier makes a class member accessible only within its own package?",
    "answer": [ "default", "public", "private" ],
    "correctAnswer": 0,
    "level": 4
  },
  {
    "type": "chat",
    "prompt": "Which of the following is true about constructors?",
    "answer": [ "Constructors have the same name as the class they are in", "Constructors can have a return type", "Constructors can be inherited from a superclass" ],
    "correctAnswer": 0,
    "level": 4
  }
]
